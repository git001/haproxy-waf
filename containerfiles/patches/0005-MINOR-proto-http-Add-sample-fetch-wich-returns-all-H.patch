From b025a06de34b19dd3bc091ed943567b374b9b81b Mon Sep 17 00:00:00 2001
From: Thierry FOURNIER <thierry.fournier@ozon.io>
Date: Wed, 19 Apr 2017 15:15:14 +0200
Subject: [PATCH 5/6] MINOR: proto-http: Add sample fetch wich returns all
 HTTP headers

The sample fetch returns all headers including the last jump line.
The last jump line is used to determine if the block of headers is
truncated or not.
---
 doc/configuration.txt |    6 ++++++
 src/proto_http.c      |   26 ++++++++++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/doc/configuration.txt b/doc/configuration.txt
index 93641f3..c453320 100644
--- a/doc/configuration.txt
+++ b/doc/configuration.txt
@@ -14123,6 +14123,12 @@ payload_lv(<offset1>,<length>[,<offset2>]) : binary (deprecated)
   (eg: "stick on", "stick match"), and for "res.payload_lv" when used in the
   context of a response such as in "stick store response".
 
+req.hdrs : string
+  Returns the current request headers as string including the last empty line
+  separating headers from the request body. This empty can be used for detecting
+  truncated header bloc. This sample fetch is useful for some SPOE headers
+  analyzer.
+
 req.hdrs_bin : binary
   Returns the current request headers contained in preparsed binary form. This
   is usefull for offloading some processing with SPOE. The format is easy to
diff --git a/src/proto_http.c b/src/proto_http.c
index 3a3cf35..5a203f8 100644
--- a/src/proto_http.c
+++ b/src/proto_http.c
@@ -10441,6 +10441,31 @@ smp_fetch_uniqueid(const struct arg *args, struct sample *smp, const char *kw, v
 	return 1;
 }
 
+/* Returns a string blok containing all headers including the
+ * empty ine wich separes headers from the body. This is useful
+ * form some headers analysis.
+ */
+static int
+smp_fetch_hdrs(const struct arg *args, struct sample *smp, const char *kw, void *private)
+{
+	struct http_msg *msg;
+	struct hdr_idx *idx;
+	struct http_txn *txn;
+
+	CHECK_HTTP_MESSAGE_FIRST();
+
+	txn = smp->strm->txn;
+	idx = &txn->hdr_idx;
+	msg = &txn->req;
+
+	smp->data.type = SMP_T_STR;
+	smp->data.u.str.str = msg->chn->buf->p + hdr_idx_first_pos(idx);
+	smp->data.u.str.len = msg->eoh - hdr_idx_first_pos(idx) + 1 +
+	                      (msg->chn->buf->p[msg->eoh] == '\r');
+
+	return 1;
+}
+
 /* Returns the header request in a length/value encoded format.
  * This is useful for exchanges with the SPOE.
  *
@@ -13461,6 +13486,7 @@ static struct sample_fetch_kw_list sample_fetch_keywords = {ILH, {
 	{ "req.body_size",   smp_fetch_body_size,      0,                NULL,    SMP_T_SINT, SMP_USE_HRQHV },
 	{ "req.body_param",  smp_fetch_body_param,     ARG1(0,STR),      NULL,    SMP_T_BIN,  SMP_USE_HRQHV },
 
+	{ "req.hdrs",        smp_fetch_hdrs,           0,                NULL,    SMP_T_BIN,  SMP_USE_HRQHV },
 	{ "req.hdrs_bin",    smp_fetch_hdrs_bin,       0,                NULL,    SMP_T_BIN,  SMP_USE_HRQHV },
 
 	/* HTTP version on the response path */
-- 
1.7.10.4

